(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./src/demos/experiments.js":
/*!**********************************!*\
  !*** ./src/demos/experiments.js ***!
  \**********************************/
/*! exports provided: machines */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"machines\", function() { return machines; });\n/* harmony import */ var _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babylonjs/core/Maths/math */ \"./node_modules/@babylonjs/core/Maths/math.js\");\n/* harmony import */ var _machines_PartViewer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../machines/PartViewer */ \"./src/machines/PartViewer.js\");\n/* harmony import */ var _machines_FourierSeries3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../machines/FourierSeries3D */ \"./src/machines/FourierSeries3D.js\");\n/* harmony import */ var _machines_CentroidViewer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../machines/CentroidViewer */ \"./src/machines/CentroidViewer.js\");\n/* harmony import */ var _machines_AverageBox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../machines/AverageBox */ \"./src/machines/AverageBox.js\");\n/* harmony import */ var _machines_CenteredTrochoidChain__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../machines/CenteredTrochoidChain */ \"./src/machines/CenteredTrochoidChain.js\");\n/* harmony import */ var _machines_CornerTwister__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../machines/CornerTwister */ \"./src/machines/CornerTwister.js\");\n/* harmony import */ var _parts_XYZOscillator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parts/XYZOscillator */ \"./src/parts/XYZOscillator.js\");\n/* harmony import */ var _parts_RotatingSphere__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../parts/RotatingSphere */ \"./src/parts/RotatingSphere.js\");\n/* harmony import */ var _parts_CenteredTrochoid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../parts/CenteredTrochoid */ \"./src/parts/CenteredTrochoid.js\");\n/* harmony import */ var _parts_Prefab__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../parts/Prefab */ \"./src/parts/Prefab.js\");\n/* harmony import */ var _waves_Fourier__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../waves/Fourier */ \"./src/waves/Fourier.js\");\n/* harmony import */ var _waves_Sine__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../waves/Sine */ \"./src/waves/Sine.js\");\n/* harmony import */ var _waves_Square__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../waves/Square */ \"./src/waves/Square.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst fourier_spheres = new _machines_FourierSeries3D__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    axes: [\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 1, 0),\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 0, 1),\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 1, 0),\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 0, 1),\n    ],\n    angular_frequencies: [13, 19, 23, 43],\n    trace_length: 10000,\n    time_step: 1/1000,\n});\n\nconst torus_knot = new _machines_FourierSeries3D__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    axes: [\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 1, 0),\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 0, 1)\n    ],\n    amplitudes: [2, 0.5],\n    angular_frequencies: [1, 100],\n    phases: [0, 0],\n    time_step: 1/400,\n    trace_length: 10000,\n});\n\nconst torus_knot2 = new _machines_FourierSeries3D__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    axes: [\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 1, 0),\n        new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 0, 1)\n    ],\n    amplitudes: [1, 0.5],\n    angular_frequencies: [23, 37],\n    phases: [0, 0],\n    time_step: 1/200,\n    trace_length: 2000,\n});\n\nconst nested_trochoids = new _machines_CenteredTrochoidChain__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\nconst corner_twister = new _machines_CornerTwister__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n\nconst machines = [\n    corner_twister,\n    nested_trochoids,\n    torus_knot2,\n    torus_knot,\n    fourier_spheres,\n];\n\n\n\n\n//# sourceURL=webpack:///./src/demos/experiments.js?");

/***/ }),

/***/ "./src/machines/CenteredTrochoidChain.js":
/*!***********************************************!*\
  !*** ./src/machines/CenteredTrochoidChain.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CenteredTrochoidChain; });\n/* harmony import */ var _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babylonjs/core/Maths/math */ \"./node_modules/@babylonjs/core/Maths/math.js\");\n/* harmony import */ var _Machine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Machine */ \"./src/machines/Machine.js\");\n/* harmony import */ var _parts_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parts/Point */ \"./src/parts/Point.js\");\n/* harmony import */ var _parts_Trace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parts/Trace */ \"./src/parts/Trace.js\");\n/* harmony import */ var _parts_CenteredTrochoid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parts/CenteredTrochoid */ \"./src/parts/CenteredTrochoid.js\");\n\n\n\n\n\n\n\nclass CenteredTrochoidChain extends _Machine__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    get default_parameters() {\n        return {\n            parent: undefined,\n            radii: [2.5, 2, -0.1],\n            angular_frequencies: [2, 3],\n            offset: new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](1.3, 0, 0),\n            trace_length: 4000,\n            time_step: 1/200,\n        }\n    }\n\n    make_trochoids(parameters, origin) {\n        const trochoids = [];\n        const N = parameters.angular_frequencies.length;\n        const radii = parameters.radii;\n        let current_parent = origin.to_joint('translate');\n        for (let i = 0; i < N; i++) {\n            const trochoid = new _parts_CenteredTrochoid__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n                parent: current_parent,\n                angular_frequency: parameters.angular_frequencies[i],\n                frame_radius: radii[i],\n                frame_phase: 0,\n                wheel_radius: radii[i + 1],\n                wheel_phase: 0,\n                show_radii: true, \n            });\n            trochoids.push(trochoid);\n            current_parent = trochoid.to_joint('rotate_wheel');\n        }\n        return trochoids;\n    }\n\n    init(parameters) {\n        this._time_step = parameters.time_step;\n        const origin = new _parts_Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            parent: parameters.parent,\n            offset: _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"].Zero(),\n            show_offset: false\n        });\n\n        const trochoids = this.make_trochoids(parameters, origin);\n        const last_trochoid = trochoids[trochoids.length - 1];\n        last_trochoid.offset = parameters.offset;\n\n        const trace = new _parts_Trace__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({ \n            source: last_trochoid.to_joint('translate_offset'),\n            origin: origin.to_joint('translate'),\n            num_points: parameters.trace_length\n        });\n\n        this.add_part(origin);\n        this.add_parts(trochoids);\n        this.add_part(trace);\n\n        return origin;\n        \n    }\n\n    get time_step() {\n        return this._time_step;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/machines/CenteredTrochoidChain.js?");

/***/ }),

/***/ "./src/machines/CornerTwister.js":
/*!***************************************!*\
  !*** ./src/machines/CornerTwister.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CornerTwister; });\n/* harmony import */ var _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babylonjs/core/Maths/math */ \"./node_modules/@babylonjs/core/Maths/math.js\");\n/* harmony import */ var _Machine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Machine */ \"./src/machines/Machine.js\");\n/* harmony import */ var _parts_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parts/Point */ \"./src/parts/Point.js\");\n/* harmony import */ var _parts_Oscillator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parts/Oscillator */ \"./src/parts/Oscillator.js\");\n/* harmony import */ var _parts_Centroid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parts/Centroid */ \"./src/parts/Centroid.js\");\n/* harmony import */ var _parts_RotatingSphere__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../parts/RotatingSphere */ \"./src/parts/RotatingSphere.js\");\n/* harmony import */ var _parts_Trace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../parts/Trace */ \"./src/parts/Trace.js\");\n/* harmony import */ var _waves_Sine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../waves/Sine */ \"./src/waves/Sine.js\");\n/* harmony import */ var _waves_Square__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../waves/Square */ \"./src/waves/Square.js\");\n\n\n\n\n\n\n\n\n\n\n\nclass CornerTwister extends _Machine__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    get default_parameters() {\n        return {\n            parent: undefined,\n            // [top, bottom]\n            amplitudes: [0.5, 0.5],\n            frequencies: [2, 4],\n            phases: [0, 0],\n            twist_frequencies: [1/4, 1/2],\n            half_height: 2,\n            waves: [new _waves_Sine__WEBPACK_IMPORTED_MODULE_7__[\"default\"](), new _waves_Sine__WEBPACK_IMPORTED_MODULE_7__[\"default\"]()],\n            trace_length: 8000,\n        }\n    }\n\n    get_corner_offsets(half_height) {\n        const hh = half_height;\n        return [\n            new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](hh, 0, hh),\n            new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](-hh, 0, hh),\n            new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](-hh, 0, -hh),\n            new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](hh, 0, -hh),\n        ]\n    }\n\n    make_twists(parameters, centers) {\n        return centers.map((center, i) => {\n            return new _parts_RotatingSphere__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n                parent: centers[i].to_joint('translate'),\n                axes: [new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 1, 0)],\n                angular_frequencies: [parameters.twist_frequencies[i]],\n                phases: [0, 0],\n                show_offset: false\n            });\n        });\n    }\n\n    make_offsets(parameters, twist) {\n        const corners = this.get_corner_offsets(parameters.half_height);\n        return corners.map((corner) => {\n            return new _parts_Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                parent: twist.to_joint('rotate'),\n                offset: corner,\n                show_offset: true,\n            });\n        });\n    }\n\n    make_oscillators(parameters, offsets, index) {\n        return offsets.map((offset) => {\n            return new _parts_Oscillator__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                parent: offset.to_joint('translate'),\n                amplitude: parameters.amplitudes[index],\n                phase: parameters.phases[index],\n                direction: new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 1, 0),\n                frequency: parameters.frequencies[index],\n                wave: parameters.waves[index],\n            });\n        });\n    }\n\n    make_centroids(origin, top_oscs, bottom_oscs) {\n        return top_oscs.map((top_osc, i) => {\n            const bottom_osc = bottom_oscs[i];\n            return new _parts_Centroid__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n                points: [\n                    top_osc.to_joint('translate_wave'), \n                    bottom_osc.to_joint('translate_wave')\n                ],\n                origin: origin.to_joint('translate'),\n                weights: [1, 1]\n            });\n        });\n    }\n    \n    make_traces(parameters, origin, centroids) {\n        return centroids.map((centroid) => {\n            return new _parts_Trace__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n                source: centroid.to_joint('translate'),\n                origin: origin.to_joint('translate'),\n                num_points: parameters.trace_length,\n            });\n        });\n    }\n\n    init(parameters) {\n        const origin = new _parts_Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            parent: parameters.parent,\n            offset: _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"].Zero(),\n        });\n\n        const top = new _parts_Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            parent: origin.to_joint('translate'),\n            offset: new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, parameters.half_height, 0),\n        });\n        const bottom = new _parts_Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            parent: origin.to_joint('translate'),\n            offset: new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, -parameters.half_height, 0),\n        });\n        \n        const [top_twist, bottom_twist] = this.make_twists(\n            parameters, [top, bottom]);\n\n        const top_offsets = this.make_offsets(parameters, top_twist);\n        const bottom_offsets = this.make_offsets(parameters, bottom_twist);\n\n        const top_oscs = this.make_oscillators(parameters, top_offsets, 0);\n        const bottom_oscs = this.make_oscillators(\n            parameters, bottom_offsets, 1);\n\n        const centroids = this.make_centroids(origin, top_oscs, bottom_oscs);\n        const traces = this.make_traces(parameters, origin, centroids);\n\n        this.add_part(origin);\n        this.add_parts([top, bottom]);\n        this.add_parts([top_twist, bottom_twist]);\n        this.add_parts(top_offsets);\n        this.add_parts(bottom_offsets);\n        this.add_parts(top_oscs);\n        this.add_parts(bottom_oscs);\n        this.add_parts(centroids);\n        this.add_parts(traces);\n\n        return origin;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/machines/CornerTwister.js?");

/***/ }),

/***/ "./src/parts/CenteredTrochoid.js":
/*!***************************************!*\
  !*** ./src/parts/CenteredTrochoid.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CenteredTrochoid; });\n/* harmony import */ var _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babylonjs/core/Maths/math */ \"./node_modules/@babylonjs/core/Maths/math.js\");\n/* harmony import */ var _babylonjs_core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babylonjs/core/Meshes/transformNode */ \"./node_modules/@babylonjs/core/Meshes/transformNode.js\");\n/* harmony import */ var _babylonjs_core_Meshes_meshBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babylonjs/core/Meshes/meshBuilder */ \"./node_modules/@babylonjs/core/Meshes/meshBuilder.js\");\n/* harmony import */ var _babylonjs_materials_grid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babylonjs/materials/grid */ \"./node_modules/@babylonjs/materials/grid/index.js\");\n/* harmony import */ var _Part__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Part */ \"./src/parts/Part.js\");\n\n\n\n\n\n\n\n\nclass CenteredTrochoid extends _Part__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n    get default_parameters() {\n        return {\n            parent: undefined,\n            // The frame circle's radius\n            frame_radius: 0.96,\n            // wheel_radius can be > 0 for epitrochoids or < 0 for \n            // hypotrochoids\n            wheel_radius: -0.30,\n            // How fast the center of the wheel is rotating with respect\n            // to the center of the frame\n            angular_frequency: 4,\n            // Initial angle of the wheel relative to the center of the frame\n            // circle\n            frame_phase: 0,\n            // Initial angle of the wheel relative to the wheel center\n            wheel_phase: 0,\n            // Show the radii for debuggging\n            show_radii: false,\n            // Offset to put the trace relative to the wheel center\n            offset: new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0.2, 0, 0)\n        }\n    }\n\n    init(parameters) {\n        super.init(parameters);\n\n        this.offset = parameters.offset;\n        this.show_radii = parameters.show_radii;\n        this.frame_radius = parameters.frame_radius;\n        this.wheel_radius = parameters.wheel_radius;\n        this.angular_frequency = parameters.angular_frequency;\n        this.frame_phase = parameters.frame_phase;\n        this.wheel_phase = parameters.frame_phase;\n        this.frame_angle = parameters.frame_phase;\n        this.wheel_angle = parameters.wheel_phase;\n    }\n\n    get primitive_names() {\n        return ['frame_radius_primitive', 'wheel_radius_primitive'];\n    }\n\n    get transform_names() {\n        return [\n            'rotate_frame', \n            'translate_frame', \n            'translate_wheel', \n            'rotate_wheel', \n            'translate_offset'\n        ];\n    }\n\n    get part_type() {\n        return 'centered-trochoid'\n    }\n\n    build(scene) {\n        const rotate_frame = new _babylonjs_core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__[\"TransformNode\"](\n            `${this.id}-rotate-frame`, scene);\n        rotate_frame.rotation.y = this.frame_angle;\n        if (this.parent !== undefined) {\n            rotate_frame.parent = this.parent.node;\n        }\n        this.rotate_frame = rotate_frame;\n\n        const translate_frame = new _babylonjs_core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__[\"TransformNode\"](\n            `${this.id}-translate-frame`, scene);\n        translate_frame.position = new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](this.frame_radius, 0, 0);\n        translate_frame.parent = rotate_frame;\n        this.translate_frame = translate_frame;\n\n        const translate_wheel = new _babylonjs_core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__[\"TransformNode\"](\n            `${this.id}-translate-wheel`, scene);\n        translate_wheel.position = new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](this.wheel_radius, 0, 0);\n        translate_wheel.parent = translate_frame;\n        this.translate_wheel = translate_wheel;\n\n        const rotate_wheel = new _babylonjs_core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__[\"TransformNode\"](\n            `${this.id}-rotate-wheel`, scene);\n        rotate_wheel.rotation.y = this.wheel_angle;\n        rotate_wheel.parent = translate_wheel;\n        this.rotate_wheel = rotate_wheel;\n\n        const offset = new _babylonjs_core_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_1__[\"TransformNode\"](\n            `${this.id}-translate-offset`, scene);\n        offset.position = this.offset;\n        offset.parent = rotate_wheel;\n        this.translate_offset = offset;\n\n        if (!this.show_radii) {\n            return;\n        }\n\n        const line_frame = _babylonjs_core_Meshes_meshBuilder__WEBPACK_IMPORTED_MODULE_2__[\"MeshBuilder\"].CreateLines(`${this.id}-line-frame`, {\n            points: [\n                _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"].Zero(),\n                new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](-this.frame_radius, 0, 0),\n            ]\n        }, scene);\n        line_frame.parent = translate_frame;\n        this.frame_radius_primitive = line_frame;\n\n        const line_wheel = _babylonjs_core_Meshes_meshBuilder__WEBPACK_IMPORTED_MODULE_2__[\"MeshBuilder\"].CreateLines(`${this.id}-line-wheel`, {\n            points: [\n                _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"].Zero(),\n                new _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](-this.wheel_radius, 0, 0),\n            ]\n        }, scene);\n        line_wheel.parent = translate_wheel;\n        this.wheel_radius_primitive = line_wheel;\n\n        const line_offset = _babylonjs_core_Meshes_meshBuilder__WEBPACK_IMPORTED_MODULE_2__[\"MeshBuilder\"].CreateLines(`${this.id}-line-offset`, {\n            points: [\n                _babylonjs_core_Maths_math__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"].Zero(),\n                this.offset.negate(),\n            ]\n        }, scene);\n        line_offset.parent = offset;\n        this.offset_primitive = line_offset;\n\n    }\n\n    get wheel_ratio() {\n        if (this.wheel_radius === 0) {\n            return 1;\n        }\n        return 1 + this.frame_radius / this.wheel_radius;\n    }\n\n    update(t) {\n        const theta = this.angular_frequency * t;\n        this.frame_angle = theta + this.frame_phase;\n        this.wheel_angle = this.wheel_ratio * theta + this.wheel_phase;\n\n        this.rotate_frame.rotation.y = this.frame_angle;\n        this.rotate_wheel.rotation.y = this.wheel_angle;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/parts/CenteredTrochoid.js?");

/***/ })

}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{57:function(e,t,a){"use strict";a.r(t);var s=a(0),r=(a(75),a(78)),n=a(63),i=a(64),h=a(73),o=a(70),_=a(65),l=a(29),p=a(61),f=a(62),w=a(67);class d extends f.a{get default_parameters(){return{parent:void 0,wave:new w.a,amplitude:1,frequency:1,phase:0}}init(e){super.init(e),this.wave=e.wave,this.phase=e.phase,this.frequency=e.frequency,this.amplitude=e.amplitude}build(e){const t=this.wave.compute(0),a=new l.a(`${this.id}-scale`,e);a.scaling=new s.r(1,1,1).scale(t),void 0!==this.parent&&(a.parent=this.parent.node),this.scale=a}update(e){const t=this.amplitude*this.wave.compute(this.frequency*e+this.phase);this.scale.scaling=new s.r(1,1,1).scale(t)}}var u=a(69);a(79),a(80),a(66);class c extends f.a{get default_parameters(){return{parent:void 0,frame_radius:.96,wheel_radius:-.3,angular_frequency:4,frame_phase:0,wheel_phase:0,show_radii:!1,offset:new s.r(.2,0,0)}}init(e){super.init(e),this.offset=e.offset,this.show_radii=e.show_radii,this.frame_radius=e.frame_radius,this.wheel_radius=e.wheel_radius,this.angular_frequency=e.angular_frequency,this.frame_phase=e.frame_phase,this.wheel_phase=e.frame_phase,this.frame_angle=e.frame_phase,this.wheel_angle=e.wheel_phase}get primitive_names(){return["frame_radius_primitive","wheel_radius_primitive"]}get transform_names(){return["rotate_frame","translate_frame","translate_wheel","rotate_wheel","translate_offset"]}get part_type(){return"centered-trochoid"}build(e){const t=new l.a(`${this.id}-rotate-frame`,e);t.rotation.y=this.frame_angle,void 0!==this.parent&&(t.parent=this.parent.node),this.rotate_frame=t;const a=new l.a(`${this.id}-translate-frame`,e);a.position=new s.r(this.frame_radius,0,0),a.parent=t,this.translate_frame=a;const r=new l.a(`${this.id}-translate-wheel`,e);r.position=new s.r(this.wheel_radius,0,0),r.parent=a,this.translate_wheel=r;const n=new l.a(`${this.id}-rotate-wheel`,e);n.rotation.y=this.wheel_angle,n.parent=r,this.rotate_wheel=n;const i=new l.a(`${this.id}-translate-offset`,e);if(i.position=this.offset,i.parent=n,this.translate_offset=i,!this.show_radii)return;const h=p.a.CreateLines(`${this.id}-line-frame`,{points:[s.r.Zero(),new s.r(-this.frame_radius,0,0)]},e);h.parent=a,this.frame_radius_primitive=h;const o=p.a.CreateLines(`${this.id}-line-wheel`,{points:[s.r.Zero(),new s.r(-this.wheel_radius,0,0)]},e);o.parent=r,this.wheel_radius_primitive=o;const _=p.a.CreateLines(`${this.id}-line-offset`,{points:[s.r.Zero(),this.offset.negate()]},e);_.parent=i,this.offset_primitive=_}get wheel_ratio(){return 0===this.wheel_radius?1:1+this.frame_radius/this.wheel_radius}update(e){const t=this.angular_frequency*e;this.frame_angle=t+this.frame_phase,this.wheel_angle=this.wheel_ratio*t+this.wheel_phase,this.rotate_frame.rotation.y=this.frame_angle,this.rotate_wheel.rotation.y=this.wheel_angle}}a(74);a(81),a(82),a(83);a.d(t,"machines",(function(){return y}));const m=new class extends n.a{get default_parameters(){return{parent:void 0,trace_length:4e3}}init(e){const t=new i.a({parent:e.parent,offset:s.r.Zero(),show_offset:!1}),a=new d({parent:t.to_joint("translate")}),r=new u.a({parent:a.to_joint("scale")}),n=new _.a({source:r.to_joint("translate"),origin:t.to_joint("translate"),num_points:e.trace_length});return this.add_part(t),this.add_part(a),this.add_part(r),this.add_part(n),t}},g=new r.a,v=new r.a({axes:[new s.r(0,1,0),new s.r(0,0,1),new s.r(0,1,0),new s.r(0,0,1)],angular_frequencies:[13,19,23,43],trace_length:1e4,time_step:.001}),q=new r.a({axes:[new s.r(0,1,0),new s.r(0,0,1)],amplitudes:[2,.5],angular_frequencies:[1,100],phases:[0,0],time_step:.0025,trace_length:1e4}),j=new r.a({axes:[new s.r(0,1,0),new s.r(0,0,1)],amplitudes:[1,.5],angular_frequencies:[23,37],phases:[0,0],time_step:.005,trace_length:2e3}),k=new class extends n.a{get default_parameters(){return{parent:void 0,radii:[2.5,2,-.1],angular_frequencies:[2,3],offset:new s.r(1.3,0,0),trace_length:4e3,time_step:.005}}make_trochoids(e,t){const a=[],s=e.angular_frequencies.length,r=e.radii;let n=t.to_joint("translate");for(let t=0;t<s;t++){const s=new c({parent:n,angular_frequency:e.angular_frequencies[t],frame_radius:r[t],frame_phase:0,wheel_radius:r[t+1],wheel_phase:0,show_radii:!0});a.push(s),n=s.to_joint("rotate_wheel")}return a}init(e){this._time_step=e.time_step;const t=new i.a({parent:e.parent,offset:s.r.Zero(),show_offset:!1}),a=this.make_trochoids(e,t),r=a[a.length-1];r.offset=e.offset;const n=new _.a({source:r.to_joint("translate_offset"),origin:t.to_joint("translate"),num_points:e.trace_length});return this.add_part(t),this.add_parts(a),this.add_part(n),t}get time_step(){return this._time_step}},y=[new class extends n.a{get default_parameters(){return{parent:void 0,amplitudes:[.5,.5],frequencies:[2,4],phases:[0,0],twist_frequencies:[.25,.5],half_height:2,waves:[new w.a,new w.a],trace_length:8e3}}get_corner_offsets(e){const t=e;return[new s.r(t,0,t),new s.r(-t,0,t),new s.r(-t,0,-t),new s.r(t,0,-t)]}make_twists(e,t){return t.map((a,r)=>new u.a({parent:t[r].to_joint("translate"),axes:[new s.r(0,1,0)],angular_frequencies:[e.twist_frequencies[r]],phases:[0,0],show_offset:!1}))}make_offsets(e,t){return this.get_corner_offsets(e.half_height).map(e=>new i.a({parent:t.to_joint("rotate"),offset:e,show_offset:!0}))}make_oscillators(e,t,a){return t.map(t=>new h.a({parent:t.to_joint("translate"),amplitude:e.amplitudes[a],phase:e.phases[a],direction:new s.r(0,1,0),frequency:e.frequencies[a],wave:e.waves[a]}))}make_centroids(e,t,a){return t.map((t,s)=>{const r=a[s];return new o.a({points:[t.to_joint("translate_wave"),r.to_joint("translate_wave")],origin:e.to_joint("translate"),weights:[1,1]})})}make_traces(e,t,a){return a.map(a=>new _.a({source:a.to_joint("translate"),origin:t.to_joint("translate"),num_points:e.trace_length}))}init(e){const t=new i.a({parent:e.parent,offset:s.r.Zero()}),a=new i.a({parent:t.to_joint("translate"),offset:new s.r(0,e.half_height,0)}),r=new i.a({parent:t.to_joint("translate"),offset:new s.r(0,-e.half_height,0)}),[n,h]=this.make_twists(e,[a,r]),o=this.make_offsets(e,n),_=this.make_offsets(e,h),l=this.make_oscillators(e,o,0),p=this.make_oscillators(e,_,1),f=this.make_centroids(t,l,p),w=this.make_traces(e,t,f);return this.add_part(t),this.add_parts([a,r]),this.add_parts([n,h]),this.add_parts(o),this.add_parts(_),this.add_parts(l),this.add_parts(p),this.add_parts(f),this.add_parts(w),t}},k,j,q,v,g,m]}}]);